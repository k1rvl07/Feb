@use "sass:map";
@use "sass:list";
@use "sass:math";
@use "sass:meta";

// Переменные, мапы и списки

$colors-map: (
    "grey": #899d9d,
    "black": #0b1919,
    "dark-blue": #1d2f30,
    "green": #506829,
    "green-toxic": #bae249,
    "green-hover": #91ac46,
    "green-active": #688b05,
    "red": #e24949
);

@function color($color-name) {
    @return map.get($colors-map, $color-name);
}

$font-weights-map: (
    "thin": 100,
    "extra-light": 200,
    "light": 300,
    "regular": 400,
    "medium": 500,
    "semi-bold": 600,
    "bold": 700,
    "extra-bold": 800,
    "black": 900,
    "extra-black": 1000
);

@function font-weight($weight-name) {
    @return map.get($font-weights-map, $weight-name);
}

$text-list: (
    main-content-heading "Cormorant" bold normal white 48px 60px,
    main-content-help-text "Open Sans" regular normal white 16px 16px,
    card-heading "Cormorant" bold normal white 24px 24px,
    card-description "Open Sans" regular normal color("grey") 16px 16px,
    heading-second "Cormorant" bold italic white 48px 48px,
    artifacts-info-heading "Cormorant" bold normal color("dark-blue") 24px 24px,
    artifacts-description "Open Sans" regular normal color("green-active") 16px 16px,
    footer-text "Open Sans" regular normal color("grey") 12px 12px
);

$dynamic-text-list: (
    nav-link "Open Sans" regular normal white color("green-toxic") color(green-active) 16px 16px,
    button-simple "Open Sans" regular normal color("green-toxic") color("green-hover") color("green-active") 16px 16px,
    button-simple-arrow "Open Sans" bold normal color("green-toxic") color("green-hover") color("green-active") 16px
        16px,
    button-transparent "Open Sans" regular normal color("green-toxic") color("black") color("black") 16px 16px,
    button-black "Open Sans" regular normal color("black") color("green-active") color("black") 16px 16px,
    button-black-arrow "Open Sans" bold normal color("black") color("green-active") color("black") 16px 16px,
    button-green "Open Sans" bold normal color("black") color("black") color("black") 16px 16px,
    button-icon "Open Sans" regular normal color("grey") color("green-toxic") color("green-active") 16px 16px,
    input-placeholder "Open Sans" regular normal color("grey") white white 16px 16px,
    input-text "Open Sans" bold normal color("black") color("black") color("black") 16px 16px
);

// Миксины

$breakpoints: (
    desktop: 1110px
);

@mixin respond-to($media) {
    @if map.has-key($breakpoints, $media) {
        @media (min-width: map.get($breakpoints, $media)) {
            @content;
        }
    } @else {
        @warn "Unfortunately, no value could be retrieved from `#{$media}`. "
            + "Available breakpoints are: #{map.keys($breakpoints)}.";
    }
}

@mixin size($types, $values...) {
    $types-list: if(meta.type-of($types) == "list", $types, ($types));
    $value-index: 1;

    @each $type in $types-list {
        @if $type == "default" {
            $width: if(list.length($values) >= $value-index, list.nth($values, $value-index), null);
            $height: if(list.length($values) >= $value-index + 1, list.nth($values, $value-index + 1), null);
            width: $width;
            height: $height;
            $value-index: $value-index + 2;
        } @else if $type == "min" {
            $min-width: if(list.length($values) >= $value-index, list.nth($values, $value-index), null);
            $min-height: if(list.length($values) >= $value-index + 1, list.nth($values, $value-index + 1), null);
            min-width: $min-width;
            min-height: $min-height;
            $value-index: $value-index + 2;
        } @else if $type == "max" {
            $max-width: if(list.length($values) >= $value-index, list.nth($values, $value-index), null);
            $max-height: if(list.length($values) >= $value-index + 1, list.nth($values, $value-index + 1), null);
            max-width: $max-width;
            max-height: $max-height;
            $value-index: $value-index + 2;
        } @else {
            @error "Invalid size type: #{$type}. Use 'default', 'min', or 'max'.";
        }
    }
}

@mixin flex(
    $flex: on,
    $direction: null,
    $justify: null,
    $align-content: null,
    $align-items: null,
    $wrap: null,
    $gap: null
) {
    @if $flex == on {
        display: flex;
    }

    @if $direction != null {
        flex-direction: $direction;
    }

    @if $justify != null {
        justify-content: $justify;
    }

    @if $align-content != null {
        align-content: $align-content;
    }

    @if $align-items != null {
        align-items: $align-items;
    }

    @if $wrap != null {
        flex-wrap: $wrap;
    }

    @if $gap != null {
        gap: $gap;
    }
}

@mixin flex-item($align-self: null, $flex-grow: null, $flex-shrink: null, $flex-basis: null, $order: null) {
    @if $align-self != null {
        align-self: $align-self;
    }

    @if $flex-grow != null {
        flex-grow: $flex-grow;
    }

    @if $flex-shrink != null {
        flex-shrink: $flex-shrink;
    }

    @if $flex-basis != null {
        flex-basis: $flex-basis;
    }

    @if $order != null {
        order: $order;
    }
}

@mixin grid-setup(
    $on: null,
    $rows: null,
    $columns: null,
    $areas: null,
    $row-gap: null,
    $column-gap: null,
    $justify-items: null,
    $align-items: null,
    $justify-content: null,
    $align-content: null
) {
    @include grid-template($on, $rows, $columns, $areas, $row-gap, $column-gap);
    @include grid-alignment($justify-items, $align-items, $justify-content, $align-content);
}

@mixin grid-template($on: null, $rows: null, $columns: null, $areas: null, $row-gap: null, $column-gap: null) {
    @if $on == on {
        display: grid;
    }
    @if $rows != null {
        grid-template-rows: $rows;
    }
    @if $columns != null {
        grid-template-columns: $columns;
    }
    @if $areas != null {
        grid-template-areas: $areas;
    }
    @if $row-gap != null {
        row-gap: $row-gap;
    }
    @if $column-gap != null {
        column-gap: $column-gap;
    }
}

@mixin grid-alignment($justify-items: null, $align-items: null, $justify-content: null, $align-content: null) {
    @if $justify-items != null {
        justify-items: $justify-items;
    }
    @if $align-items != null {
        align-items: $align-items;
    }
    @if $justify-content != null {
        justify-content: $justify-content;
    }
    @if $align-content != null {
        align-content: $align-content;
    }
}

@mixin grid-item-alignment($justify-self: null, $align-self: null) {
    @if $justify-self != null {
        justify-self: $justify-self;
    }

    @if $align-self != null {
        align-self: $align-self;
    }
}

@mixin spacing($types, $sides, $values...) {
    $types-list: if(meta.type-of($types) == "list", $types, ($types));
    $sides-list: if(meta.type-of($sides) == "list", $sides, ($sides));

    $value-index: 1;

    @each $type in $types-list {
        @if $type == "margin" or $type == "padding" {
            @each $side in $sides-list {
                @if list.length($values) < $value-index {
                    @error "Not enough values provided for '#{$side}' side.";
                }

                @if $side == "all" {
                    #{$type}: list.nth($values, $value-index);
                } @else if $side == "x" {
                    #{$type}-left: list.nth($values, $value-index);
                    #{$type}-right: list.nth($values, $value-index);
                } @else if $side == "y" {
                    #{$type}-top: list.nth($values, $value-index);
                    #{$type}-bottom: list.nth($values, $value-index);
                } @else if list.index("top" "bottom" "left" "right", $side) {
                    #{$type}-#{$side}: list.nth($values, $value-index);
                } @else {
                    @error "Invalid side: #{$side}. Use 'top', 'bottom', 'left', 'right', 'x', 'y', or 'all'.";
                }

                $value-index: $value-index + 1;
            }
        } @else {
            @error "Invalid type: #{$type}. Use 'margin' or 'padding'.";
        }
    }
}

@mixin border-radius($top-left: null, $top-right: null, $bottom-right: null, $bottom-left: null) {
    @if $top-left != null and $top-right != null and $bottom-right != null and $bottom-left != null {
        border-radius: $top-left $top-right $bottom-right $bottom-left;
    } @else if $top-left != null {
        @if meta.type-of($top-left) == number and math.unit($top-left) != "" {
            border-radius: $top-left;
        }
    }
}

@mixin border($sides: null, $width: null, $style: null, $color: null, $radiuses...) {
    @if $sides == all {
        @if $width != null {
            border-width: $width;
        }
        @if $style != null {
            border-style: $style;
        }
        @if $color != null {
            border-color: $color;
        }
    } @else {
        @each $side in $sides {
            @if $width != null {
                border-#{$side}-width: $width;
            }
            @if $style != null {
                border-#{$side}-style: $style;
            }
            @if $color != null {
                border-#{$side}-color: $color;
            }
        }
    }
    @if list.length($radiuses) > 0 {
        @include border-radius($radiuses...);
    }
}

@mixin image-fit($fit: null, $position: null) {
    object-fit: $fit;
    object-position: $position;
}

@mixin background-image($image-path, $repeat: null, $size: null, $position: null) {
    background-image: url($image-path);
    background-repeat: $repeat;
    background-size: $size;
    background-position: $position;
}

@mixin button($type: null) {
    @extend %simple-transition;
    @if $type == "simple" {
        @extend %button-simple;
    } @else if $type == "simple-arrow" {
        @extend %button-simple-arrow;
    } @else if $type == "transparent" {
        @extend %button-transparent;
        background-color: transparent;
        @include border(all, 1px, solid, color("green-toxic"));
        &:hover {
            background-color: color("green-toxic");
        }
        &:active {
            border-color: color("green-active");
            background-color: color("green-active");
        }
    } @else if $type == "black" {
        @extend %button-black;
    } @else if $type == "black-arrow" {
        @extend %button-black-arrow;
    } @else if $type == "green" {
        @extend %button-green;
        background-color: color("green-toxic");
        &:hover {
            background-color: color("green-hover");
        }
        &:active {
            background-color: color("green-active");
        }
    } @else if $type == "icon" {
        @extend %button-icon;
    }
}

// Комплексные шаблоны

@each $item in $text-list {
    $name: list.nth($item, 1);
    $font-family: list.nth($item, 2);
    $font-weight: list.nth($item, 3);
    $font-style: list.nth($item, 4);
    $color: list.nth($item, 5);
    $font-size: list.nth($item, 6);
    $desktop-font-size: list.nth($item, 7);

    %#{$name} {
        font-family: $font-family;
        font-weight: font-weight($font-weight);
        font-style: $font-style;
        font-size: $font-size;
        color: $color;
        @if $font-size != $desktop-font-size {
            @include respond-to(desktop) {
                font-size: $desktop-font-size;
            }
        }
    }
}

@each $item in $dynamic-text-list {
    $name: list.nth($item, 1);
    $font-family: list.nth($item, 2);
    $font-weight: list.nth($item, 3);
    $font-style: list.nth($item, 4);
    $color: list.nth($item, 5);
    $hover-color: list.nth($item, 6);
    $active-color: list.nth($item, 7);
    $font-size: list.nth($item, 8);
    $desktop-font-size: list.nth($item, 9);

    %#{$name} {
        @extend %simple-transition;
        font-family: $font-family;
        font-weight: font-weight($font-weight);
        font-style: $font-style;
        color: $color;
        font-size: $font-size;
        &:hover {
            color: $hover-color;
        }
        &:active {
            color: $active-color;
        }
        @if $font-size != $desktop-font-size {
            @include respond-to(desktop) {
                font-size: $desktop-font-size;
            }
        }
    }
}

// Простые шаблоны

%container {
    width: 256px;
    margin: 0 auto;
    @include respond-to(desktop) {
        width: 1110px;
    }
}

%simple-transition {
    transition: 0.3s;
    &:hover {
        transition: 0.3s;
    }
    &:active {
        transition: 0.05s;
    }
}

%simple-scale {
    &:active {
        transform: scale(0.9);
    }
}

%slider-window {
    overflow-x: scroll;
    overflow-y: hidden;
    scroll-snap-type: x mandatory;
    @include respond-to("desktop") {
        overflow-x: hidden;
    }
}

%slides {
    transition: transform 0.5s ease-in-out;
}

%slide {
    scroll-snap-align: start;
    position: relative;
}

%input {
    @extend %simple-transition;
    @extend %input-text;
    @include spacing(padding, (x, y), 16px, 10.5px);
    @include size(default, 100%, null);
    background-color: white;
    @include respond-to(desktop) {
        @include size(default, 350px, 45px);
    }
    &:hover {
        background-color: color("grey");
    }
    &::placeholder {
        @extend %input-placeholder;
    }
    &:invalid {
        @include border(all, 1px, solid, color("red"));
    }
}
